package ssui.fabbasi.tourguide;

import java.util.List;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;

import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

/**
 * This class represents the mapview of the TourGuide application. It contains a connection to the database and a locationManager, and a broadcast listener.
 * When the application's location service notices a location change, this class picks up the broadcast and compares the new location to the locales in the
 * database, and creates a notification if the new location is within a given range of any of the locales.
 * @author Faiz
 *
 */
public class TourGuideMapActivity extends MapActivity {

	//Map variables
	private MapController mapController;
	private MapView mapview;
	private static LocationListener locationListener;

	//Connection to the database.
	private LocaleDataSource db;

	//Iterator for the Locale list
	private int i;
	private List<Locale> locales;
	public double latitude;
	public double longitude;

	//Booleans that let us know if location updates are coming from the location service.
	public static boolean service_is_on;
	public static boolean from_service;

	//Variables for drawing pins on map
	private Drawable pin;
	private List<Overlay> mapOverlays;
	private LocaleOverlay localeOverlay;


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map_layout);

		//Get all the locales from the database
		db = new LocaleDataSource(this);
		locales = db.getAllLocales();

		//We assume that the service is off to begin with
		service_is_on = false;
		from_service = false;

		//Start iterator at 0
		i = 0;
		LocationManager locationManager = (LocationManager)getSystemService(LOCATION_SERVICE);


		//Set up the mapview
		mapview = (MapView)findViewById(R.id.mapview);
		mapview.setBuiltInZoomControls(true);
		mapController = mapview.getController();
		//Set initial center to the UC Turnaround
		mapController.setCenter(new GeoPoint((int)(40.444199*1E6), (int) (-79.941867*1E6)));
		mapController.setZoom(20);

		//Retrieve the current overlays on the map
		mapOverlays = mapview.getOverlays();
		//Create a Drawable object from the red_map_pin resource
		pin = getResources().getDrawable(R.drawable.red_map_pin);

		//Create a new LocaleOverlay class, with our red map pin drawable
		localeOverlay = new LocaleOverlay(pin, this);

		//Iterate through the locales in our list, and create a pin overlay at each location.
		for(Locale l : locales){
			GeoPoint point = new GeoPoint((int)(l.getLat()*1E6), (int)(l.getLon()*1E6));
			localeOverlay.addItem(point, l.getName(), "");
			mapOverlays.add(localeOverlay);
		}

		//Set up the methods for our locationListener
		locationListener = new LocationListener() {


			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onProviderEnabled(String provider) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onProviderDisabled(String provider) {
				// TODO Auto-generated method stub

			}

			/**
			 * Called when the location is changed. It contains logic to separate updates from fake updates, and updates generated by our locationService.
			 * For either instance, the application will still attempt to find nearby locales, but it does only one at a time, with priority to the locationService
			 * update.
			 * 
			 * Note: The logic is included for demonstration purposes. In production mode, the logic should be removed.
			 */
			@Override
			public void onLocationChanged(Location location) {
				if(!service_is_on){
					makeUseOfNewLocation(location);
				}

				else if(service_is_on && from_service){
					makeUseOfNewLocation(location);
					//Since we did some action on the new location, we set the from_service to false.
					from_service = false;
				}
				//Else do nothing

			}

			/**
			 * This method iterates through the locales in the database, and tries to find one that is within 50 meters of the current location. If found,
			 * an AlertDialog is created and shown to the user, and we stop looking for locales nearby.
			 * @param location The updated location of the device
			 */
			private void makeUseOfNewLocation(Location location) {
				boolean notified = false;
				for(final Locale l : locales){
					//Create a fake location for comparisons
					Location loc = new Location("dummyprovider");
					//Set the latitude and longitude of the new location, with the current locale
					loc.setLatitude(l.getLat());
					loc.setLongitude(l.getLon());

					//Keep track of whether the device is within 50 meters of a locale
					boolean close = location.distanceTo(loc) < 50;

					//If the new location is close to a locale, and a notification hasn't already been sent for the new location change,
					//we create a new notification.
					if(close && !notified){
						//Change the notified boolean to true so we don't send another notification to the user.
						notified = true;
						//Create a new alertDialog notification
						AlertDialog.Builder adb = new AlertDialog.Builder(TourGuideMapActivity.this);
						adb.setTitle("Point of Interest");
						adb.setMessage("You're near " + l.getName());
						//Set a positive button that sends the user to the individual locale view
						adb.setPositiveButton("View More", new OnClickListener() 
						{     
							//When clicked, we create a new intent that points to the new Locale individual view. We pass the id of the locale
							//to the intent to use to generate the necessary data for the Locale view.
							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								Intent launchView = new Intent(TourGuideMapActivity.this, LocaleViewActivity.class);

								launchView.putExtra("id", l.getId());
								startActivity(launchView);

							}
						}); 
						//The negative button will just close the alertDialog notification.
						adb.setNegativeButton("Close", null);
						adb.show();
					}
					//If we've notified the user, we stop comparing the new location to the locales, and we break.
					if(notified){
						break;
					}
				}
				//Transform the new location's latitude and longitude into int values, so we can change the center of the mapview to reflect where the user is
				int lon = (int) (location.getLongitude()*1E6);
				int lat = (int) (location.getLatitude()*1E6);

				//Create new GeoPoint to point the map to.
				GeoPoint geopoint = new GeoPoint(lat, lon);
				mapController.animateTo(geopoint);
				//Invalidate map to cause redraw
				mapview.invalidate();
			}

		};

		//Request updates from the phone
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,locationListener);
		locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,0,0,locationListener);

	}

	@Override
	public void onResume(){
		super.onResume();
		//We no longer know if the service is on, so we assume it is off (until we receive another update).
		service_is_on = false;
	}



	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}


	/**
	 * This class listens for location updates given by our Locale Service. When it receives a new location, it attempts to change the location of the mapView
	 * by calling the onLocationChanged(Location loc) method
	 * @author Faiz
	 *
	 */
	static public class LocaleServiceReceiver extends BroadcastReceiver
	{
		@Override
		public void onReceive(Context context, Intent intent)//this method receives broadcast messages. Be sure to modify AndroidManifest.xml file in order to enable message receiving
		{
			//Tell the TourGuideMapActivity that the service is in use.
			service_is_on = true;

			//Get the latitude and longitude stuffed into the intent that was captured.
			double latitude = intent.getDoubleExtra(LocationService.LATITUDE, 0);
			double longitude = intent.getDoubleExtra(LocationService.LONGITUDE, 0);

			//Create a fake location with our lat and lon values
			Location loc = new Location("dummyprovider");
			loc.setLatitude(latitude);
			loc.setLongitude(longitude);
			if(loc != null && locationListener != null){
				//Tell the TourGuideMapActivity that the following location is from the service.
				from_service = true;
				locationListener.onLocationChanged(loc);
			}

		}
	}
}
